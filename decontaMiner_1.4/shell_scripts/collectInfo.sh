#!/bin/bash
# collectInfo.sh - see below for details 
# Copyright (C) 2015-2017,  M. Sangiovanni, ICAR-CNR, Napoli 
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.i
#  
# Author: Mara Sangiovanni. Contact:  mara.sangiovanni@icar.cnr.it
# 
# INPUT:	-i : input folder, usually the COLLECTED_INFO folder generated by the filterBlastInfo script
#		-V : organism type either V(irus) or O(ther). Default: O(ther)
#		-t : match count significativity threshold: extract as significative contaminations only the one involving organisms with at least the specified matches. Default: 1.
#  PLEASE DO NOTE: starting from version 1.2, the flag -g is not available anymore. For bacteria and fungi the script automatically generates (with the same threshold), the reports for  both genus and species grouping.
############################################################################################
###############    CODE! DO NOT CHANGE BELOW THIS LINE #####################################
############################################################################################


### 1 - EVALUATE THE INPUT OPTIONS AND VALUES
echo
echo " -- COLLECTING INFO  --"
echo
if (($# == 0)); then
  echo "No input parameters!";
  echo " collectInfo.sh -i <inputDirectoryPath> [ collectInfo.sh -h to print the help menu with all the optional parameters]"; exit;
fi
if (($# > 8)); then
  echo "Too many parameters";
  echo " collectInfo.sh -i <inputDirectoryPath> [ collectInfo.sh -h to print the help menu with all the optional parameters]"; exit;

fi

# parameter to pass to the other scripts
fulldir='' #input file
t='' # match count threshold
V=''
### kept for future extensions g='' # genus/species matching
fhelp=false # print the help page

while getopts ":hi:t:V:" flag; do
  if [[ ("${OPTARG}" == "-i") || ("${OPTARG}" == "-t") || ("${OPTARG}" == "-V") ]]; then
           echo " Missing one or more input " ;exit; # input cannot be a flag! Raw but effective check
  fi
  case "${flag}" in
    i) fulldir="${OPTARG}" ;;
    t) t="${OPTARG}" ;;
    V) V="${OPTARG}" ;;
    h) fhelp=true ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
     ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

# 1.1 PRINT THE HELP 
 if [ $fhelp = "true" ]; then
 echo " USAGE: collectInfo.sh [required parameters] [optional parameters] ";
 echo " REQUIRED PARAMETERS:";
 echo "  -i <inputDirectoryPath> . FULL PATH to the DIRECTORY containing the files generated by the filterBlastInfo script. ";
 echo "";
 echo " OPTIONAL PARAMETERS:";
 echo "  -t <matchCountThreshold>. Set the match count threshold to filter out relevant organisms. Default: 5.";
 # echo "  -g <matching>. Specifies if the organisms must be matched on genus or species. DOES NOT APPLY TO VIRUSES! Accepted values are: G (for genus), S (for species). Default: S.";
 echo "  -V <virusesFlag>. Specifies if input data is from viruses. Accepted values are: V (for Viruses), O (for Other organism). Default: O.";
 echo "";
 echo " OTHER INFO:  " 
 echo "  -h prints this help";
 echo "";
 exit; 



 exit;
 fi

# 1.2 FATAL ERRORS:
if [[ -z "$fulldir" ]]; then
        echo "Missing input directory";
        echo "Usage: collectInfo.sh -i <inputDirectoryPath> [ collectInfo.sh -h to print the help menu with all the optional parameters] "; exit;
fi

if [[ ! (-d "$fulldir") ]]; then
 echo "ERROR: Wrong input filepath or directory name. ";
 echo "specified directory path was: $fulldir"
 exit;
fi

# check if the match threshold is numeric
if [[ ! (-z "$t" ) &&  ! ("$t" =~ ^[0-9]+$) ]]; then
        echo "ERROR: match threshold should be numeric.";
        echo "Usage: collectInfo.sh -i <inputDirectoryPath>  [ collectInfo.sh -h to print the help menu with all the optional parameters. Default: 5] "; exit;
fi

# organism type  flag
if [[ ( -z "$V" ) ]]; then
        echo "INFO:   organism type flag -V not specified. O(thers) assumed  (default option).";
else
if [[ ! ("$V" =~ [OoVv] ) ]]; then
               echo "ERROR: wrong value for  organism type flag";
               echo "Usage: collectInfo.sh -i <inputDirectoryPath>  [-V < organism type flag (V for Viruses, O for others,, default O)>] "; exit;
       fi
fi

# genus/species end flag
#if [[ ( -z "$g" ) ]]; then
#        echo "INFO:  genus/species organism filtering -g not specified. S(pecies) assumed  (default option).";
#else
#        if [[ ! ("$g" =~ [gGsS] ) ]]; then
#                echo "ERROR: wrong value for genus/species organism filtering flag";
#                echo "Usage: collectInfo.sh -i <inputDirectoryPath>  [-G <genus/species organism filtering flag (G/S, default G)>] "; exit;
#        fi
#fi
#### 2 SET THE FLAG AND OPTIONS AS SPECIFIED IN THE INPUT
echo 
echo "- PROCESSING DETAILS "


#1 ORGANISM TYPE: VIRUS/OTHERS (at the moment Bacteria or Fungi)
# The default is others (OTHER_ORGANISM_TYPE_FLAG =1). For Viruses is 0

OTHER_ORGANISM_TYPE_FLAG=1
if [[ ! ( -z "$V" ) && ("$V" =~ [vV] ) ]]; then
   echo "INFO: processing VIRUS data";
   OTHER_ORGANISM_TYPE_FLAG=0; # heuristic approach
else
   echo "INFO: processing NON virus data"; # genus
fi


#2 GENUS/SPECIES MATCHING
# number of terms to include in the name when matching on the organism, 1 for genus, 2 for species, 0 for viruses.
# (i.e. Valid only for organisms other than VIRUS )
GE_SP_TERM_NUM=2

if [[ ("$OTHER_ORGANISM_TYPE_FLAG" == 0) ]]; then
 GE_SP_TERM_NUM=0;
# echo "INFO: genus/species matching is not appliable to VIRUSES. Ignoring the flag";
#else
# if [[ ! ( -z "$g" ) && ("$g" =~ [gG] ) ]]; then
#    echo "INFO: filtering data by GENUS";
#    GE_SP_TERM_NUM=1; # genus
#  else
#    echo "INFO: filtering data by SPECIES."; # genus.
# fi
fi

#3 MATCH THRESHOLD
# an organism is considered in output only if there are more than $COUNT_THRE matches on it. Default is 5.
COUNT_THRE=5

# USER SPECIFIED
if [[ ! (-z "$t" )   ]]; then
   COUNT_THRE=$t;
   echo "INFO: filtering with match count threshold $COUNT_THRE."; 
else
   echo "INFO: filtering with DEFAULT match count threshold 5."; 
fi


############################################################################
SEP="/"
# THE EXECUTABLE DIR
SHELL_EXE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# decontaminer root dir
DECO_ROOT_DIR="$(dirname "$SHELL_EXE_DIR" )"


# INPUT PATH
ROOT_DIR=${fulldir%/}
SEARCH_PATH=$ROOT_DIR$SEP
SEARCH_PATH+="*_subject_counts.txt"

# OUTPUT PATH (writes in the same directory)
OUTPUT_PATH=$ROOT_DIR$SEP

# TEMP SCRIPT
CURRENT_DIR=$(pwd)
TEMP_SCRIPT_ROOT=$CURRENT_DIR$SEP
TEMP_SCRIPT_ROOT+='TEMP'

if [ ! -d "$TEMP_SCRIPT_ROOT" ]; then
  mkdir $TEMP_SCRIPT_ROOT
fi

# script paths
MMD=$DECO_ROOT_DIR$SEP
MMD+="perl_scripts/mineMicrobialData.pl"
EBI=$DECO_ROOT_DIR$SEP
EBI+="perl_scripts/extractBarPlotInfo.pl"
GHR=$DECO_ROOT_DIR$SEP
GHR+="perl_scripts/generateHTMLReport.pl"
#if [ ! -d "$OUTPUT_PATH" ]; then
#  mkdir $OUTPUT_PATH
#fi

for fullfile in $SEARCH_PATH; do
  fname=$(basename "$fullfile")
  dname=$(dirname "$fullfile")
  filename="${fname%.*}"
  
  TEMP_SCRIPT=$TEMP_SCRIPT_ROOT$SEP
  TEMP_SCRIPT_CI=$TEMP_SCRIPT
  TEMP_SCRIPT_CI+=$filename
  TEMP_SCRIPT_CI+="_MMD_Launcher.sh"

  # create the script
  #echo "Processing file $fullfile"

  SP=" "
  echo "#!/bin/bash" > $TEMP_SCRIPT_CI
  EXECUTE_STRING=$MMD$SP$fullfile$SP$GE_SP_TERM_NUM$SP$COUNT_THRE
  echo $EXECUTE_STRING >> $TEMP_SCRIPT_CI
  
  # if organism is not viruses, generates also the reports with genus grouping
  if [[ ! ("$OTHER_ORGANISM_TYPE_FLAG" == 0) ]]; then
        GENUS_TERM=1; # genus
 	EXECUTE_STRING=$MMD$SP$fullfile$SP$GENUS_TERM$SP$COUNT_THRE
  	echo $EXECUTE_STRING >> $TEMP_SCRIPT_CI
  fi
  #execute the script
  /bin/bash $TEMP_SCRIPT_CI
done

# Once the single files are created generates also the count matrix 
#
 echo "INFO: filtering terminated. Generating data Matrix";
TEMP_SCRIPT=$TEMP_SCRIPT_ROOT$SEP
TEMP_SCRIPT_EBI=$TEMP_SCRIPT
TEMP_SCRIPT_EBI+="EBI_Launcher.sh"

SP=" "
echo "#!/bin/bash" > $TEMP_SCRIPT_EBI
EXECUTE_STRING=$EBI$SP$ROOT_DIR$SP$GE_SP_TERM_NUM$SP$COUNT_THRE
echo $EXECUTE_STRING >> $TEMP_SCRIPT_EBI

# if organism is not viruses, generates also the reports with genus grouping
if [[ ! ("$OTHER_ORGANISM_TYPE_FLAG" == 0) ]]; then
        GENUS_TERM=1; # genus
	EXECUTE_STRING=$EBI$SP$ROOT_DIR$SP$GENUS_TERM$SP$COUNT_THRE
	echo $EXECUTE_STRING >> $TEMP_SCRIPT_EBI
fi

/bin/bash $TEMP_SCRIPT_EBI

# at the end of the whole process generates the HTML report fot the selected organism type and thresholf
echo "INFO: processing terminated. Generating HTML report";
TEMP_SCRIPT=$TEMP_SCRIPT_ROOT$SEP
TEMP_SCRIPT_GHR=$TEMP_SCRIPT
TEMP_SCRIPT_GHR+="GHR_Launcher.sh"
HTML_DIR=$DECO_ROOT_DIR
HTML_DIR+=$SEP"html_templates"
# builds the output directory into the main organisms dir
COL_INFO_DIR="$(dirname "$ROOT_DIR")"
ORG_DIR="$(dirname "$COL_INFO_DIR")"
HTML_OUT_DIR=$ORG_DIR$SEP
HTML_OUT_DIR+="HTML_REPORTS"

if [ ! -d "$HTML_OUT_DIR" ]; then
  mkdir $HTML_OUT_DIR
fi
SP=" "
# if viruses, generates only one html report
if [[ ("$OTHER_ORGANISM_TYPE_FLAG" == 0) ]]; then
	# builds the specific dir
 	GROUP_DESC="all"

	SAMPLES_HTML_DIR=$HTML_OUT_DIR$SEP
	SAMPLES_HTML_DIR+="SAMPLES_HTML_PAGES_"$GROUP_DESC
	SAMPLES_HTML_DIR+="_CT_"$COUNT_THRE

	if [ ! -d "$SAMPLES_HTML_DIR" ]; then
  	mkdir $SAMPLES_HTML_DIR
	fi

	echo "#!/bin/bash" > $TEMP_SCRIPT_GHR
	EXECUTE_STRING=$GHR$SP$ROOT_DIR$SP$HTML_DIR$SP$HTML_OUT_DIR$SP$OTHER_ORGANISM_TYPE_FLAG$SP$COUNT_THRE
	echo $EXECUTE_STRING >> $TEMP_SCRIPT_GHR
else
	echo "#!/bin/bash" > $TEMP_SCRIPT_GHR
	# if organism is not viruses, generates also the reports with genus grouping
        OTHER_ORGANISM_TYPE_FLAG=1
	GROUP_DESC="ge"
	SAMPLES_HTML_DIR=$HTML_OUT_DIR$SEP
	SAMPLES_HTML_DIR+="SAMPLES_HTML_PAGES_"$GROUP_DESC
	SAMPLES_HTML_DIR+="_CT_"$COUNT_THRE

	if [ ! -d "$SAMPLES_HTML_DIR" ]; then
  		mkdir $SAMPLES_HTML_DIR
	fi

	echo "#!/bin/bash" > $TEMP_SCRIPT_GHR	

	EXECUTE_STRING=$GHR$SP$ROOT_DIR$SP$HTML_DIR$SP$HTML_OUT_DIR$SP$OTHER_ORGANISM_TYPE_FLAG$SP$COUNT_THRE
	echo $EXECUTE_STRING >> $TEMP_SCRIPT_GHR
	
	# now the same for species
	GROUP_DESC="sp"
	OTHER_ORGANISM_TYPE_FLAG=2

        SAMPLES_HTML_DIR=$HTML_OUT_DIR$SEP
        SAMPLES_HTML_DIR+="SAMPLES_HTML_PAGES_"$GROUP_DESC
        SAMPLES_HTML_DIR+="_CT_"$COUNT_THRE

        if [ ! -d "$SAMPLES_HTML_DIR" ]; then
        	mkdir $SAMPLES_HTML_DIR
        fi

        EXECUTE_STRING=$GHR$SP$ROOT_DIR$SP$HTML_DIR$SP$HTML_OUT_DIR$SP$OTHER_ORGANISM_TYPE_FLAG$SP$COUNT_THRE
        echo $EXECUTE_STRING >> $TEMP_SCRIPT_GHR

fi
/bin/bash $TEMP_SCRIPT_GHR

echo "INFO: processing terminated. Output files written in the dir "$HTML_OUT_DIR;
